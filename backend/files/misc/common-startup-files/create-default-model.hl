
// Creating the default OpenAI machine learning model.
try

   // Connecting to Magic database.
   data.connect:[generic|magic]

      // Checking if default model has already been created.
      io.file.load:/misc/common-startup-files/default.md
      data.read
         table:ml_types
         where
            and
               type.eq:default
      if
         not-exists:x:@data.read/*
         .lambda

            // Creating default generic model.
            data.create
               table:ml_types
               values
                  type:default
                  model:gpt-4.1-2025-04-14
                  max_tokens:int:25000
                  max_context_tokens:int:25000
                  max_request_tokens:int:25000
                  max_function_invocations:int:100
                  temperature:decimal:0.1
                  supervised:int:1
                  cached:int:0
                  auth:root
                  threshold:decimal:0.3
                  greeting:Hi there, I am your virtual AI-based software development assistant. How can I help you?
                  system_message:x:@io.file.load

      else

         // Updating existing type
         data.update
            table:ml_types
            values
               model:gpt-4.1-2025-04-14
               max_tokens:int:25000
               max_context_tokens:int:25000
               max_request_tokens:int:25000
               max_function_invocations:int:100
               temperature:decimal:0.1
               supervised:int:1
               cached:int:0
               auth:root
               threshold:decimal:0.3
               system_message:x:@io.file.load
            where
               and
                  type.eq:default

      /*
       * Importing all new snippets to type.
       */
      .training-data
      io.file.list:/misc/common-startup-files/default-files/
      for-each:x:@io.file.list/*
         if
            strings.ends-with:x:@.dp/#
               .:.md
            .lambda
               .prompt
               .meta
               .completion
               io.file.load:x:@.dp/#
               strings.split:x:@io.file.load
                  .:"\n"
               set-value:x:@.prompt
                  strings.trim:x:@strings.split/0
               set-value:x:@.meta
                  strings.trim:x:@strings.split/1
               set-value:x:@.completion
                  get-value:x:@io.file.load
               set-value:x:@.completion
                  strings.replace:x:@.completion
                     get-value:x:@.prompt
                     .:
               set-value:x:@.completion
                  strings.replace:x:@.completion
                     get-value:x:@.meta
                     .:
               set-value:x:@.completion
                  strings.trim:x:@.completion
               unwrap:x:+/*/*/*
               add:x:@.training-data
                  .
                     .
                        prompt:x:@.prompt
                        meta:x:@.meta
                        completion:x:@.completion

      // Looping through each new snippet and importing into type.
      for-each:x:@.training-data/*
         data.read
            table:ml_training_snippets
            columns
               id
            where
               and
                  meta.eq:x:@.dp/#/*/meta
         if
            not-exists:x:@data.read/*
            .lambda
               data.create
                  table:ml_training_snippets
                  values
                     type:default
                     meta:x:@.dp/#/*/meta
                     prompt:x:@.dp/#/*/prompt
                     completion:x:@.dp/#/*/completion

         else

            // Won't trigger re-vectorization, but OK, good enough.
            data.update
               table:ml_training_snippets
               values
                  prompt:x:@.dp/#/*/prompt
                  completion:x:@.dp/#/*/completion
               where
                  and
                     id.eq:x:@data.read/*/*/id

.catch

   // Doing some basic logging.
   log.info:Something went wrong as we tried to create default type
      message:x:@.arguments/*/message


/*
 * Creates an HTTP GET invocation and returns the result to caller.
 */
.arguments
   url
      type:string
      mandatory:bool:true
   query-params
      type:key-value
      mandatory:bool:false
.icon:http

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/url
validators.url:x:@.arguments/*/url

// Checking if we've got QUERY parameters.
if
   exists:x:@.arguments/*/query-params
   .lambda

      // Making sure we URL encode everything.
      for-each:x:@.arguments/*/query-params/*
         set-value:x:@.dp/#
            strings.concat
               get-name:x:@.dp/#
               .:=
               strings.url-encode:x:@.dp/#

      // Appending QUERY parameters to URL.
      set-value:x:@.arguments/*/url
         strings.concat
            get-value:x:@.arguments/*/url
            .:?
            strings.join:x:@.arguments/*/query-params/*
               .:&

// Creating HTTP invocation.
http.get:x:@.arguments/*/url
   convert:bool:true

// Verifying above invocation succeeded.
if
   and
      mte:x:@http.get
         .:int:200
      lt:x:@http.get
         .:int:300
   .lambda

      // Returning result to caller.
      return-nodes:x:@http.get/content/*

else

   // Oops ...!!
   lambda2hyper:x:@http.get
   log.error:HTTP GET invocation failed
      response:x:@lambda2hyper
   throw:HTTP GET invocation failed

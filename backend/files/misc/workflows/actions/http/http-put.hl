
/*
 * Creates an HTTP POST invocation and returns the result to caller.
 */
.arguments
   url
      type:string
      mandatory:bool:true
   token-type
      type:enum
      mandatory:bool:false
      values
         .:Bearer
   token
      type:string
      mandatory:bool:false
   query-params
      type:key-value
      mandatory:bool:false
   payload
      type:key-value
      mandatory:bool:true
.icon:http

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/url
validators.url:x:@.arguments/*/url
validators.mandatory:x:@.arguments/*/payload

// Checking if we've got a token.
if
   exists:x:@.arguments/*/token
   .lambda

      // Defaulting [token-type] to Bearer token.
      validators.default:x:@.arguments
         token-type:Bearer

      // Handling token according to type of token.
      switch:x:@.arguments/*/token-type

         case:Bearer
            strings.concat
               .:"Bearer "
               get-value:x:@.arguments/*/token
            unwrap:x:+/*/*/*
            add:x:../*/http.put/*/headers
               .
                  Authorization:x:@strings.concat

         default
            throw:Unsupported token type

// Decorating HTTP POST invocation.
add:x:./*/http.put
   get-nodes:x:@.arguments/*/payload

// Checking if we've got QUERY parameters.
if
   exists:x:@.arguments/*/query-params
   .lambda

      // Making sure we URL encode everything.
      for-each:x:@.arguments/*/query-params/*
         set-value:x:@.dp/#
            strings.concat
               get-name:x:@.dp/#
               .:=
               strings.url-encode:x:@.dp/#

      // Appending QUERY parameters to URL.
      set-value:x:@.arguments/*/url
         strings.concat
            get-value:x:@.arguments/*/url
            .:?
            strings.join:x:@.arguments/*/query-params/*
               .:&

// Creating HTTP invocation.
http.put:x:@.arguments/*/url
   headers
   convert:bool:true

// Verifying above invocation succeeded.
if
   and
      mte:x:@http.put
         .:int:200
      lt:x:@http.put
         .:int:300
   .lambda

      // Returning result to caller.
      return-nodes:x:@http.put/content/*

else

   // Oops ...!!
   lambda2hyper:x:@http.put
   log.error:HTTP POST invocation failed
      response:x:@lambda2hyper
   throw:HTTP POST invocation failed

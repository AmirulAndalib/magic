
/*
 * Creates a new Stripe payment for the given [customer_id] using the
 * specified [payment_method], for the given [amount] in the given [currency].
 *
 * Will use your Stripe API token found from your settings as it's interacting
 * with the Stripe API.
 *
 * Notice, [automatic_tax] will only work if customer has a valid tax location,
 * which can be accomplished by retrieving IP address as you create the customer,
 * and pass in to Stripe.
 */
.arguments
   customer_id
      type:string
      mandatory:bool:true
   payment_method
      type:int
      mandatory:bool:true
   price
      type:string
      mandatory:bool:true
   automatic_tax
      type:bool
.icon:payment

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/customer_id
validators.mandatory:x:@.arguments/*/payment_method
validators.mandatory:x:@.arguments/*/price
validators.default:x:@.arguments
   automatic_tax:bool:true

// Retrieving token to use for invocations towards Stripe.
.token
set-value:x:-
   strings.concat
      .:"Bearer "
      config.get:"magic:stripe:token"

// Invoking Stripe REST API.
http.post:"https://api.stripe.com/v1/subscriptions"
   headers
      Content-Type:application/x-www-form-urlencoded
      Authorization:x:@.token
   payload
      customer:x:@.arguments/*/customer_id
      items[0][price]:x:@.arguments/*/price
      default_payment_method:x:@.arguments/*/payment_method
      automatic_tax[enabled]:x:@.arguments/*/automatic_tax
   convert:true

// Sanity checking above invocation.
if
   mte
      get-value:x:@http.post
      .:int:400
   .lambda

      // Oops, something went wrong ...!!
      lambda2hyper:x:@http.post
      log.error:Something went wrong while invoking Stripe API to create subscription
         result:x:@lambda2hyper
         provider:Stripe
      throw:Something went wrong while invoking Stripe API to create subscription
         public:true
         status:500

/*
 * Checking if charge was successful.
 *
 * Notice, Stripe does NOT return an "authentication URL" for subscriptions,
 * for reasons I don't know, so the best we can do here, is to return finished
 * equaling false, and just encourage user to pay the invoice he have been
 * given on email.
 */
if
   eq:x:@http.post/*/content/*/status
      .:incomplete
   .lambda

      // Charge was NOT successful, and probably needs 3D secure
      yield
         finished:bool:false
         id:x:@http.post/*/content/*/id
         product:x:@http.post/*/content/*/items/*/data/0/*/price/*/product

// Returning customer ID to caller.
yield
   finished:bool:true
   id:x:@http.post/*/content/*/id
   product:x:@http.post/*/content/*/items/*/data/0/*/price/*/product

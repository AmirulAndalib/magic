
/*
 * Creates an SQL AI function and associates with the specified machine learning type.
 *
 * This function will not vectorize the type.
 */
.arguments

   // Mandatory name of machine learning type.
   type:string

   // Mandatory name of database to execute SQL towards.
   database:string

   // Mandatory type of database to execute SQL towards.
   database-type:string

   // Mandatory SQL to execute.
   sql:string

   // Mandatory name of module where to save AI function.
   module:string

   // Mandatory filename to use when saving AI function.
   filename:string

   // Mandatory description of what the function does.
   description:string

// Ensuring user is root.
auth.ticket.verify:root

// Sanity checking invocation.
validators.mandatory:x:@.arguments/*/type
validators.mandatory:x:@.arguments/*/database
validators.mandatory:x:@.arguments/*/sql
validators.mandatory:x:@.arguments/*/module
validators.mandatory:x:@.arguments/*/filename
validators.mandatory:x:@.arguments/*/description

// Creating our filepath.
.filepath
set-value:x:@.filepath
   strings.concat
      .:/modules/
      get-value:x:@.arguments/*/module
      get-value:x:@.arguments/*/filename

// Buffer object for lambda object we're creating.
.lambda
   .arguments
   data.connect:[DATABASE]
      database-type:[TYPE]
      data.select:[SQL]
         database-type:[TYPE]
      return-nodes:x:@data.select/*

// Adding comment.
unwrap:x:+/*/*
insert-before:x:@.lambda/0
   .
      ..:x:@.arguments/*/description

// Changing template arguments.
set-value:x:@.lambda/**/=[DATABASE]
   get-value:x:@.arguments/*/database
set-value:x:@.lambda/**/=[TYPE]
   get-value:x:@.arguments/*/database-type
set-value:x:@.lambda/**/=[SQL]
   get-value:x:@.arguments/*/sql

// Transforming lambda to Hyperlambda and saving to file.
lambda2hyper:x:@.lambda/*
   comments:true
io.file.save:x:@.filepath
   get-value:x:@lambda2hyper

// Returning success to caller.
return
   result:success

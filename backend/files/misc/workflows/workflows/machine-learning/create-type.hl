
/*
 * Creates a new machine learning type.
 * 
 * You can later populate the type with RAG data.
 */
.arguments

   // Mandatory name of type.
   type:string

   // Optional system instruction for the machine learning type.
   system_message:string

// Ensuring user is root.
auth.ticket.verify:root

// Sanity checking invocation
validators.regex:x:@.arguments/*/name
   regex:^[a-z0-9_-]+$

// Applying defaults.
validators.default:x:@.arguments
   model:gpt-4.1-2025-04-14
   max_tokens:int:25000
   max_context_tokens:int:25000
   max_request_tokens:int:25000
   max_function_invocations:int:100
   temperature:decimal:0.3
   supervised:int:1
   cached:int:0
   threshold:decimal:0.3
   greeting:Hi there, I am your virtual AI-based assistant. How can I help you?
   system_message:

// Making sure we add support for executing AI functions to the system instruction.
set-value:x:@.arguments/*/system_message
   strings.concat
      get-value:x:@.arguments/*/system_message
      .:"\n\n"
      .:@"## Functions

You can execute functions by ending your response with something resembling the following:

___
FUNCTION_INVOCATION[/FOLDER/FILENAME.hl]:
{
  ""arg1"": ""value1"",
  ""arg2"": 1234
}
___

Description:

* All functions can ONLY handle arguments exactly as specified by the FUNCTION_INVOCATION
* The above is only provided as an example and not a function that actually exists
* Determine the arguments required to correctly parametrise your function invocation, but never invoke a function you cannot find in your context, and don't execute a function before the user has supplied you with all mandatory arguments
* If the user does not provide you with all mandatory arguments required to invoke a function, then ask the user for these
* It is very important that you put the FUNCTION_INVOCATION parts and the JSON payload inside of two ___ lines separated by a carriage return character
* Unless something else is explicitly stated all arguments are optional by default
* Each argument can only be supplied once
* Unless you know the argument's value, do not pass it in, but instead completely remove it from your JSON payload

### Adhere to the context

* YOU ARE UNDER NO CIRCUMSTANCES ALLOWED TO ANSWER QUESTIONS YOU CANNOT FIND THE ANSWER TO IN THE CONTEXT.
* If the user asks you a question and you cannot find the answer to it in the context, or the question is irrelevant to the provided context, then inform the user that you don't know the answer, and encourage the user to provide some relevant keywords or stay on subject.

### Image instructions

* If you find relevant images in the context then return these images as follows to the user ![image_description](image_url).
* ONLY display images you find in the context.
* If you cannot find an image in the context then DO NOT MAKE UP IMAGE URLS.

### Follow up questions instructions

* Always end your response with a carriage return, ---, and 3 follow up questions the user can ask you related to the context, unless you are about to execute a function. These questions are intended to be displayed to the user as example follow up questions the user can ask you. DO NOT RETURN THESE AS QUESTIONS TO THE USER, RETURN THESE AS EXAMPLE QUESTIONS THE USER CAN ASK YOU.

#### Example of follow up questions

```text
RESPONSE HERE

---
* What's the price?
* What's your best selling product?
* How can I contact you?
```

In the above Markdown code section you can find an example of a response and its follow up questions."

// Connecting to our database.
data.connect:magic

   // Parametrizing create invocation.
   add:x:./*/data.create/*/values
      get-nodes:x:@.arguments/*

   // Inserting our record
   data.create
      table:ml_types
      values

// Returning result to caller.
return
   result:success

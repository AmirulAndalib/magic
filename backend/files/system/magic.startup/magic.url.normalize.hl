
/*
 * Normalizing specified [url] according to [base] given, resorting to [url]
 * if no base was specified.
 */
slots.create:magic.url.normalize

   // Sanity checking invocation
   validators.mandatory:x:@.arguments/*/url
   validators.url:x:@.arguments/*/base
   validators.enum:x:@.arguments/*/scheme
      .:"http:"
      .:"https:"

   // Making sure base ends with a slash (/).
   if
      and
         exists:x:@.arguments/*/base
         not
            strings.ends-with:x:@.arguments/*/base
               .:/
      .lambda

         // Appending slash to base argument.
         set-value:x:@.arguments/*/base
            strings.concat
               get-value:x:@.arguments/*/base
               .:/

   // URL to return to caller.
   .url

   /*
    * If URL starts with a double slash '//' the scheme of the URL
    * used to request the document should be used.
    */
   if
      strings.starts-with:x:@.arguments/*/url
         .://
      .lambda

         // Making sure we were given a [scheme] arguments.
         if
            or
               not
                  exists:x:@.arguments/*/scheme
               null:x:@.arguments/*/scheme
            .lambda

               // Oops, relative URL and we were not given a scheme
               throw:Cannot apply scheme to URL since no [scheme] argument was supplied to [magic.url.normalize].

         // Applying the scheme used to retrieve the document.
         set-value:x:@.url
            strings.concat
               get-value:x:@.arguments/*/scheme
               get-value:x:@.arguments/*/url

   else-if
      strings.starts-with:x:@.arguments/*/url
         .:/
      .lambda

         // Making sure we were given a [base] arguments.
         if
            or
               not
                  exists:x:@.arguments/*/base
               null:x:@.arguments/*/base
            .lambda

               // Oops, relative URL and we were not given a scheme
               throw:Cannot apply base URL to specified URL since no [base] argument was supplied to [magic.url.normalize].

         // URL is relative to base but starts with a single slash (/).
         set-value:x:@.url
            strings.concat
               get-value:x:@.arguments/*/base
               strings.trim-start:x:@.arguments/*/url
                  .:/

   else-if
      and
         not
            strings.starts-with:x:@.arguments/*/url
               .:"http:"
         not
            strings.starts-with:x:@.arguments/*/url
               .:"https:"
         not
            strings.contains:x:@.arguments/*/url
               .:":"
      .lambda

         // Making sure we were given a [base] arguments.
         if
            or
               not
                  exists:x:@.arguments/*/base
               null:x:@.arguments/*/base
            .lambda

               // Oops, relative URL and we were not given a scheme
               throw:Cannot apply base URL to specified URL since no [base] argument was supplied to [magic.url.normalize].

         // Image URL is still relative, but doesn't start with a slash (/).
         set-value:x:@.url
            strings.concat
               get-value:x:@.arguments/*/base
               get-value:x:@.arguments/*/url

   else

      // URL is absolute, returning as is.
      set-value:x:@.url
         get-value:x:@.arguments/*/url

   // Returning URL to caller.
   return-value:x:@.url

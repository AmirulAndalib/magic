
/*
 * Sets the active session and returns the history for the currently authenticated user.
 */
.arguments
   session_id:string

// Opening up database connection.
data.connect:[generic|magic]

   // Retrieving all questions from database.
   data.select:@"
select content from ml_history where session_id = @session_id"
      session_id:x:@.arguments/*/session_id

   // Making sure above invocation returned something.
   if
      not-exists:x:@data.select/*
      .lambda
         throw:Could not find session
            public:bool:true
            status:int:404

   // Setting active session.
   cache.set:x:@.arguments/*/session_id
      expiration:int:1200
      value:x:@data.select/*/*/content

   // Returning session items to caller.
   hyper2lambda:x:@data.select/*/*/content
   remove-nodes:x:@hyper2lambda/*/*/role/=system/.
   lambda2json:x:@hyper2lambda/*
   return:x:@lambda2json

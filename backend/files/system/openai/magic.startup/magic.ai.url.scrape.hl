
/*
 * Scrapes specified [url] and creates machine learning training snippets from page,
 * by semantically chopping up page into training snippets.
 *
 * Arguments:
 * - [url] - What URL to scrape.
 * - [type] - What type to import training snippets into.
 * - [summarize] - If true will summarize all training snippets that are larger than 1,000 tokens.
 * - [headers] - Optional collection of HTTML headers we should associate with HTTP request.
 * - [images] - Optional boolean indicating whether or not we should retrieve images from URL.
 * - [lists] - Optional boolean indicating whether or not we should retrieve lists from URL.
 * - [code] - Optional boolean indicating whether or not we should retrieve code segments from URL.
 * - [main] - Optional boolean indicating whether or not we should retrieve main section from URL.
 * - [empty-completion] - Optional boolean indicating whether or not we should create training snippets that has empty completion.
 */
slots.create:magic.ai.url.scrape

   // Sanity checking invocation.
   validators.mandatory:x:@.arguments/*/url
   validators.mandatory:x:@.arguments/*/type
   validators.url:x:@.arguments/*/url

   // Ensuring [summarize] defaults to true.
   validators.default:x:@.arguments
      summarize:bool:true

   // Ensuring we retrieve images, lists, code and main section by default.
   validators.default:x:@.arguments
      images:bool:true
      lists:bool:true
      code:bool:true
      main:bool:true
      empty-completion:bool:true

   // Signaling frontend.
   .msg
   set-value:x:@.msg
      strings.concat
         .:"Scraping "
         get-value:x:@.arguments/*/url
   unwrap:x:+/**
   sockets.signal:magic.backend.chatbot
      roles:root
      args
         message:x:@.msg
         type:info

   // Fetching HTML from URL.
   .html
   add:x:+/+
      get-nodes:x:@.arguments/*/headers
   unwrap:x:+/*
   signal:magic.url.get
      url:x:@.arguments/*/url
   set-value:x:@.html
      get-value:x:@signal

   // Creating training snippets from page.
   add:x:+/+
      get-nodes:x:@.arguments/*/images
      get-nodes:x:@.arguments/*/lists
      get-nodes:x:@.arguments/*/code
      get-nodes:x:@.arguments/*/main
   unwrap:x:+/*
   signal:magic.ai.html.extract-snippets
      html:x:@.html
      url:x:@.arguments/*/url

   /*
    * Signaling frontend with meta data extracted from page.
    *
    * This provides valuable feedback to user about what training
    * snippets we found on page.
    *
    * First images.
    */
   if:x:@.arguments/*/images
      strings.concat
         .:"Found "
         get-value:x:@signal/*/meta/*/images
         .:" images on page"
      unwrap:x:+/**
      sockets.signal:magic.backend.chatbot
         roles:root
         args
            message:x:@strings.concat
            type:info

   // Then code snippets.
   if:x:@.arguments/*/code
      strings.concat
         .:"Found "
         get-value:x:@signal/*/meta/*/code
         .:" code snippets on page"
      unwrap:x:+/**
      sockets.signal:magic.backend.chatbot
         roles:root
         args
            message:x:@strings.concat
            type:info

   // Then lists.
   if:x:@.arguments/*/lists
      strings.concat
         .:"Found "
         get-value:x:@signal/*/meta/*/lists
         .:" lists on page"
      unwrap:x:+/**
      sockets.signal:magic.backend.chatbot
         roles:root
         args
            message:x:@strings.concat
            type:info

   // Then main sections.
   if:x:@.arguments/*/main
      strings.concat
         .:"Found "
         get-value:x:@signal/*/meta/*/main
         .:" main sections on page"
      unwrap:x:+/**
      sockets.signal:magic.backend.chatbot
         roles:root
         args
            message:x:@strings.concat
            type:info

   // Buffer for training snippets found as we chopped up page.
   .snippets
   add:x:@.snippets
      get-nodes:x:@signal/*/snippets/*

   // Making sure we found anything on page, and if not, warning user.
   if
      eq
         get-count:x:@.snippets/*
         .:int:0
      .lambda

         // Warning user.
         sockets.signal:magic.backend.chatbot
            roles:root
            args
               message:WARNING! We could not find any training snippets at the specified URL!
               type:warning

   else

      /*
       * Checking if caller wants to summarize snippets that are too long, and if
       * yes, we invoke OpenAI to have it summarize all training snippets that
       * are too long to be useful as training snippets.
       */
      if
         and
            exists:x:@.arguments/*/summarize
            eq:x:@.arguments/*/summarize
               .:bool:true
         .lambda

            /*
             * Caller wants to summarize long snippets, figuring out max size of snippets,
             * which are max_context_tokens / 2.
             */
            .max-size
            .api-key
            .model
            data.connect:[generic|magic]

               // Retrieving maximum context tokens for type from database.
               data.read
                  table:ml_types
                  columns
                     max_context_tokens
                     api_key
                     model
                  where
                     and
                        type.eq:x:@.arguments/*/type

               // Making sure we use 50% of max context tokens as maximum size for snippets.
               set-value:x:@.max-size
                  math.divide
                     convert:x:@data.read/*/*/max_context_tokens
                        type:int
                     .:int:2
               set-value:x:@.api-key
                  get-value:x:@data.read/*/*/api_key
               set-value:x:@.model
                  get-value:x:@data.read/*/*/model

            // Looping through all snippets to check their size.
            for-each:x:@.snippets/*

               // Concatenating prompt and completion.
               .tmp
               set-value:x:@.tmp
                  strings.concat
                     get-value:x:@.dp/#/*/prompt
                     .:"\r\n"
                     .:"\r\n"
                     get-value:x:@.dp/#/*/completion
                     
               // Counting total token count.
               openai.tokenize:x:@.tmp

               // Checking if there are too many tokens in snippet.
               if
                  mt
                     get-value:x:@openai.tokenize
                     get-value:x:@.max-size
                  .lambda

                     // Informing frontend of that we're about to summarize snippet.
                     sockets.signal:magic.backend.chatbot
                        roles:root
                        args
                           message:Summarizing snippet since it is larger than 50% of maximum context size for type
                           type:info

                     // Creating our bearer token.
                     .token
                     set-value:x:@.token
                        strings.concat
                           .:"Bearer "
                           get-first-value
                              get-value:x:@.api-key
                              config.get:"magic:openai:key"

                     // Invoking OpenAI to summarize snippet.
                     unwrap:x:+/**
                     http.post:"https://api.openai.com/v1/chat/completions"
                        headers
                           Authorization:x:@.token
                           Content-Type:application/json
                        payload
                           model:x:@.model
                           max_tokens:x:@.max-size
                           temperature:decimal:0.3
                           messages
                              .
                                 role:system
                                 content:Create a summary of the following information
                              .
                                 role:user
                                 content:x:@.dp/#/*/completion
                        convert:true

                     // Checking that above invocation returned success.
                     if
                        and
                           mte:x:@http.post
                              .:int:200
                           lt:x:@http.post
                              .:int:300
                        .lambda

                           // Success creating summary.
                           sockets.signal:magic.backend.chatbot
                              roles:root
                              args
                                 message:Successfully created summary of snippet
                                 type:info

                           // Updating completion.
                           set-value:x:@.dp/#/*/completion
                              strings.trim:x:@http.post/*/content/*/choices/0/*/message/*/content
                                 .:"\r\n\t "

                           // Updating prompt.
                           set-value:x:@.dp/#/*/prompt
                              strings.concat
                                 .:"Summary of; "
                                 strings.substring:x:@.dp/#/*/prompt
                                    .:int:0
                                    .:int:150

                     else

                        // Oops, could not summarize snippet.
                        sockets.signal:magic.backend.chatbot
                           roles:root
                           args
                              message:Could not summarize snippet, check your log for details
                              type:info
                        lambda2hyper:x:@http.post
                        log.error:Something went wrong while invoking OpenAI
                           message:x:@http.post/*/content/*/error/*/message
                           status:x:@http.post
                           error:x:@lambda2hyper

      /*
       * Creating training snippets from result of above invocation
       * but first we need to open database connection.
       */
      data.connect:[generic|magic]

         // Verifying that type exists.
         data.read
            table:ml_types
            columns
               id
            where
               and
                  type.eq:x:@.arguments/*/type
         if
            not-exists:x:@data.read/*
            .lambda

               // Oops, type does not exist.
               throw:Machine learning type does not exist.
                  type:x:@.arguments/*/type

         /*
          * Deleting all training snippets matching type, URL, and meta.
          *
          * Notice, we need to delete records from VSS table too to avoid "dangling references".
          */
         data.execute:delete from vss_ml_training_snippets where rowid in (select id as rowid from ml_training_snippets where type = @type and uri = @url)
            @type:x:@.arguments/*/type
            @url:x:@.arguments/*/url
         data.delete
            table:ml_training_snippets
            where
               and
                  type.eq:x:@.arguments/*/type
                  uri.eq:x:@.arguments/*/url

         /*
          * Now looping through each snippet from above [.snippet] and inserting into database
          * as training snippets.
          */
         for-each:x:@.snippets/*

            // Defaulting completion to empty string if [empty-completion] argument is true.
            if:x:@.arguments/*/empty-completion
               validators.default:x:@.dp/#
                  completion:

            // Checking if completion exists and is not null for training snippet.
            if
               and
                  exists:x:@.dp/#/*/completion
                  not-null:x:@.dp/#/*/completion
               .lambda

                  /*
                   * Verifying user can create more snippets.
                   *
                   * Notice, this is a slot that doesn't exist in Magic core, allowing
                   * us to create "plugin slots" that somehow validates whether or not the use
                   * can create additional training snippets or not.
                   *
                   * The idea is that the slot should throw an exception if user is not allowed
                   * to create additional training snippets.
                   */
                  add:x:+
                     get-nodes:x:@.arguments/*/type
                  try-signal:magic.ai.can-create-snippet

                  // Inserting training snippet into database.
                  data.create
                     table:ml_training_snippets
                     values
                        type:x:@.arguments/*/type
                        uri:x:@.arguments/*/url
                        prompt:x:@.dp/#/*/prompt
                        completion:x:@.dp/#/*/completion
                        meta:AINIRO-Website-Crawler

      // Informing user that we're done creating training snippets from specified URL.
      strings.concat
         .:"Done importing "
         get-count:x:@.snippets/*
         .:" training snippets from page"
      unwrap:x:+/**
      sockets.signal:magic.backend.chatbot
         roles:root
         args
            message:x:@strings.concat
            type:info

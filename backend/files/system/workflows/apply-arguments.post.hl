
/*
 * Applies the specified arguments to the specified Hyperlambda
 */
.arguments
   hyperlambda:string
   description:string
   args:*

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Converting input Hyperlambda to lambda object.
hyper2lambda:x:@.arguments/*/hyperlambda
   comments:true
if
   exists:x:@hyper2lambda/*/.arguments
   .lambda

      // Removing old arguments.
      remove-nodes:x:@hyper2lambda/*/.arguments/*
      add:x:@hyper2lambda/*/.arguments
         get-nodes:x:@.arguments/*/args/*

else

   // Adding new arguments collection into lambda object.
   add:x:+/*/*
      get-nodes:x:@.arguments/*/args/*
   add:x:@hyper2lambda
      .
         .arguments

// Checking if caller provided a description.
remove-nodes:x:@hyper2lambda/0/[0,1]/\..
if
   and
      exists:x:@.arguments/*/description
      not-null:x:@.arguments/*/description
      neq:x:@.arguments/*/description
         .:
   .lambda
      strings.replace:x:@.arguments/*/description
         .:"\r\n"
         .:"\n"
      strings.replace:x:@strings.replace
         .:"\n"
         .:"\r\n"
      unwrap:x:+/*/*
      insert-before:x:@hyper2lambda/0
         .
            ..:x:@strings.replace

// Returning updated Hyperlambda to caller.
lambda2hyper:x:@hyper2lambda/*
   comments:true
yield
   result:x:@lambda2hyper

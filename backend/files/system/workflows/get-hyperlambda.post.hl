
/*
 * Returns Hyperlambda required to execute action or snippet.
 */
.arguments
   filename:string
   args:*

// Verifying user is authorized to access endpoint.
auth.ticket.verify:root

// Loading actin/snippet Hyperlambda file and transforming to lambda object.
load-file:x:@.arguments/*/filename

// Checking if this is a action template.
if
   strings.starts-with:x:@.arguments/*/filename
      .:/misc/workflows/actions/
   .lambda

      /*
       * This is an action template type of snippet.
       * Parametrizing accordingly.
       */
      .action
      add:x:@.action
         hyper2lambda:x:@load-file
            comments:true
      .name
      strings.split:x:@.arguments/*/filename
         .:/
      strings.split:x:-/0/-
         .:.
      remove-nodes:x:@strings.split/0/-
      set-value:x:@.name
         strings.join:x:@strings.split/0
            .:.

      // Creating our action invocation.
      .invocation
         execute:magic.workflows.actions.execute
            name
            filename
            arguments
      set-value:x:@.invocation/*/execute/*/name
         get-value:x:@.name
      set-value:x:@.invocation/*/execute/*/filename
         get-value:x:@.arguments/*/filename

      // Creating our action comment.
      if
         eq
            get-name:x:@.action/0
            .:..
         .lambda
            unwrap:x:+/*/*
            insert-before:x:@.invocation/0
               .
                  ..:x:@.action/0

      // Decorating Hyperlambda according to input [args].
      for-each:x:@.arguments/*/args/*
         get-name:x:@.dp/#
         set-value:x:@.action/*/.example/*/{@get-name}
            get-value:x:@.dp/#

      // Adding default argument placeholders for invocation.
      add:x:@.invocation/*/execute/*/arguments
         get-nodes:x:@.action/*/.example/*

      // Returning result to caller as Hyperlambda.
      lambda2hyper:x:@.invocation/*
         comments:true
      yield
         result:x:@lambda2hyper

else

   /*
    * This is just some other template snippet,
    * returning as is.
    */
   unwrap:x:+/*
   return
      result:x:@load-file
